! ------------------------------------------------------------------------------
! Here the principal purpose is to test the ability to use p-basis functions
! of varying degree within a single model. The example case is a structural
! shell model. This case has been derived from the test 
!
!                ..tests/Classical2DShell/
!
! Linearized 2-D shell equations of Reissner-Naghdi type are solved in the case
! of a straight cylindrical shell with membrane-dominated asymptotic behaviour.
! The problem has been described in PitkÃ¤ranta et al. Shell deformation states 
! and the finite element method: a benchmark study of cylindrical shells. 
! Computer Methods in Applied Mechanics and Engineering 1995. 128:81-121. Here
! the shell equations are written in lines of curvature coordinates (y1 = 
! angular direction, y2 = axial direction) and a special solver code is
! employed to handle the problem using the exact surface parametrization. The
! solver code outputs the energy norm of the error.
!
! The part of the computational domain where a boundary layer has an important
! role is associated with an additional body identifier so that a different
! degree of approximation can be used within the boundary layer.
!
! The degree of approximation is defined by using a special keyword construct
! 
!               Element = "p:%a_matc_function"
!
! where the part "a_matc_function" is the name of a MATC function of a 4-tuple.
! The first argument is the identifier of the body while the remaining components
! are the coordinates of the element mid-point. At the time of writing, this
! seems to be the only functional way to get varying p within a single model.
! In this case the MATC-dependent element definition should be placed into
! Equation section. 
!
! The energy norm of the error for different p-element definitions (over the
! same 2 X 2 mesh, with p being fixed as p=8 in the boundary layer and p varying
! elsewhere) is found to be as follows (the shell thickness d=0.1): 
! 
! p=1  Relative energy error =   0.85396972358657408
! p=2  Relative energy error =   0.23800207437997356
! p=3  Relative energy error =   0.14558431573734487
! p=4  Relative energy error =   2.8912002775000799E-002
! p=5  Relative energy error =   7.0313590547632018E-003
! p=6  Relative energy error =   2.3734217622063724E-003
! p=7  Relative energy error =   5.8687216090359958E-004
! p=8  Relative energy error =   1.3339512982768768E-004
!
!
! The original author of this test: Mika Malinen 
! ------------------------------------------------------------------------------


!
! Define p for different bodies:
! 
$ function bodywisep(cx) { \
    if (cx(0)>1) {_bodywisep=8;} \
    else {_bodywisep=4;}\
}


Check Keywords "Warn"

Header
  Mesh DB "." "eighth"
End

Simulation
  Max Output Level = 5
  Coordinate System = Cartesian 2D
  Simulation Type = Steady
  Output Intervals(1) = 1
  Steady State Max Iterations = 1

  Serendipity P Elements = False
End

Body 1
  Equation = 1
  Material = 1
  Body Force = 1
End

Body 2
  Equation = 1
  Material = 1
  Body Force = 1
End

Material 1
 Poisson Ratio = Real $1.0/3.0
 Youngs Modulus = Real 7.0e+10
 Shell Thickness = Real 0.1
End

Body Force 1 
  !
  ! The solver code has a hard-coded load that is equivalent to the following
  ! specification in order to avoid FE errors from presenting the load.
  !
  Normal Pressure = Variable Coordinate
     Real MATC "1.0e-1 * 1.0e+9 * cos(2.0*tx(0))"
End

Equation 1 
  Active Solvers(1) = 1
  Element = "p:%bodywisep"
End

Solver 1
  Equation = "Shell equation"

  Variable = "U"
  Variable DOFs = 5
  Procedure = "BenchmarkShell" "ShellSolver"

  Linear System Solver = "Iterative"
  Linear System Preconditioning = ILU2
  Linear System Max Iterations = 1000
  Linear System Convergence Tolerance = 1e-7
  Linear System Iterative Method = GCR
  Linear System GCR Restart = 100
  Linear System Abort Not Converged = False
  Steady State Convergence Tolerance = 1e-09
End

Solver 2
  !
  ! Use high-order Lagrange interpolation to visualize the solution
  ! 

!  Exec Solver = never
  Equation = "result output"
  Procedure = "ResultOutputSolve" "ResultOutputSolver"
  Output File Name = case1

  Vtu Format = Logical True
  Ascii Output = True

  Lagrange Element Degree = Integer 8
  Save Bulk Only = True
End

! Symmetry at y2 = 0:
! --------------------
Boundary Condition 1
  Target Boundaries(1) = 1
  U 2 = Real 0
  U 5 = Real 0
End

! Symmetry at y1 = pi/2:
! --------------------
Boundary Condition 2
  Target Boundaries(2) = 2 3
  U 1 = Real 0
  U 4 = Real 0
End

! Fixed end at y2 = L:
! --------------------
Boundary Condition 3
  Target Boundaries(1) = 4
  U 1 = Real 0
  U 2 = Real 0
  U 3 = Real 0
  U 4 = Real 0
  U 5 = Real 0 
End

! Symmetry at y1 = 0:
! --------------------
Boundary Condition 4
  Target Boundaries(2) = 5 6
  U 1 = Real 0
  U 4 = Real 0
End

Solver 1 :: Reference Norm = Real 9.50681481E-03
Solver 1 :: Reference Norm Tolerance = Real 1.0E-5
